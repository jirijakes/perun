#+TITLE: BOLT #7: P2P Node and Channel Discovery

* Channel announcement

** Receiving [3/6]

   - [X] MUST verify the integrity AND authenticity of the message by verifying the signatures. ([[file:~/dev/scala/lnz/src/main/scala/proto/bolt/validate.scala::Channel announcement signatures][ref]])

   - [ ] if there is an unknown even bit in the ~features~ field:
     MUST NOT attempt to route messages through the channel.

   - [X] if the ~short_channel_id~'s output does NOT correspond to a P2WSH (using ~bitcoin_key_1~ and ~bitcoin_key_2~, as specified in BOLT #3) OR the output is spent:
     MUST ignore the message. ([[file:~/dev/scala/lnz/src/main/scala/proto/bolt/validate.scala::Channel announcement tx output][ref1]], [[file:~/dev/scala/lnz/src/main/scala/peer.scala::Ignore spent tx output][ref2]])

   - [X] if the specified ~chain_hash~ is unknown to the receiver:
     MUST ignore the message. ([[file:../../src/main/scala/proto/bolt/validate.scala::Channel announcement chain hash][ref1]], [[file:../../src/main/scala/peer.scala::Ignore unknown chain messages][ref2]])

   - [-] otherwise:
     
     - [X] if ~bitcoin_signature_1~, ~bitcoin_signature_2~, ~node_signature_1~ OR ~node_signature_2~ are invalid OR NOT correct:
       SHOULD fail the connection. ([[file:~/dev/scala/lnz/src/main/scala/peer.scala::Channel announcement signature fail connection][ref]])
       
     - [ ] otherwise:
       
       - [ ] if ~node_id_1~ OR ~node_id_2~ are blacklisted:
	 SHOULD ignore the message.
	 
       - [ ] otherwise:
	 
	 - [ ] if the transaction referred to was NOT previously announced as a channel:
	   
	   - [ ] SHOULD queue the message for rebroadcasting.
	     
	   - [ ] MAY choose NOT to for messages longer than the minimum expected length.
	     
       - [ ] if it has previously received a valid ~channel_announcement~, for the same transaction, in the same block, but for a different node_id_1 or node_id_2:
	 SHOULD blacklist the previous message's ~node_id_1~ and ~node_id_2~, as well as this ~node_id_1~ and ~node_id_2~ AND forget any channels connected to them.
	 
       - [ ] otherwise:
	 SHOULD store this ~channel_announcement~.
	 
   - [ ] once its funding output has been spent OR reorganized out:
     SHOULD forget a channel.

* Node announcement

** Receiving [0/9]

    - [ ] if ~node_id~ is NOT a valid compressed public key:
      SHOULD fail the connection.
      MUST NOT process the message further.

    - [ ] if ~signature~ is NOT a valid signature (using ~node_id~ of the double-SHA256 of the entire message following the ~signature~ field, including any future fields appended to the end):
      SHOULD fail the connection.
      MUST NOT process the message further.

    - [ ] if ~features~ field contains unknown even bits:
      SHOULD NOT connect to the node.
      Unless paying a BOLT #11 invoice which does not have the same bit(s) set, MUST NOT attempt to send payments to the node.
      MUST NOT route a payment through the node.

    - [ ] SHOULD ignore the first ~address descriptor~ that does NOT match the types defined above.

    - [ ] if ~addrlen~ is insufficient to hold the address descriptors of the known types:
      SHOULD fail the connection.

    - [ ] if ~port~ is equal to 0:
      SHOULD ignore ~ipv6_addr~ OR ~ipv4_addr~.

    - [ ] if ~node_id~ is NOT previously known from a ~channel_announcement~ message, OR if ~timestamp~ is NOT greater than the last-received ~node_announcement~ from this ~node_id~:
      SHOULD ignore the message.

    - [ ] otherwise:
      - [ ] if timestamp is greater than the last-received node_announcement from this node_id:
        SHOULD queue the message for rebroadcasting.
        MAY choose NOT to queue messages longer than the minimum expected length.

    - [ ] MAY use rgb_color AND alias to reference nodes in interfaces.
      SHOULD insinuate their self-signed origins.
