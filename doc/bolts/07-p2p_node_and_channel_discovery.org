#+TITLE: BOLT #7: P2P Node and Channel Discovery

Source: [[https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md]]

* Channel announcement

** Receiving [3/6]

   - [X] MUST verify the integrity AND authenticity of the message by verifying the signatures. ([[file:~/dev/scala/lnz/src/main/scala/proto/bolt/channel_announcement.scala::Channel announcement signatures][ref]])

   - [ ] if there is an unknown even bit in the ~features~ field:
     MUST NOT attempt to route messages through the channel.

   - [X] if the ~short_channel_id~'s output does NOT correspond to a P2WSH (using ~bitcoin_key_1~ and ~bitcoin_key_2~, as specified in BOLT #3) OR the output is spent:
     MUST ignore the message. ([[file:~/dev/scala/lnz/src/main/scala/proto/bolt/channel_announcement.scala::Channel announcement tx output][ref]])

   - [X] if the specified ~chain_hash~ is unknown to the receiver:
     MUST ignore the message. ([[file:../../src/main/scala/proto/bolt/channel_announcement.scala::Channel announcement chain hash][ref]])

   - [-] otherwise:
     
     - [X] if ~bitcoin_signature_1~, ~bitcoin_signature_2~, ~node_signature_1~ OR ~node_signature_2~ are invalid OR NOT correct:
       SHOULD fail the connection. ([[file:~/dev/scala/lnz/src/main/scala/proto/bolt/channel_announcement.scala::Channel announcement signatures][ref]])
       
     - [ ] otherwise:
       
       - [ ] if ~node_id_1~ OR ~node_id_2~ are blacklisted:
	 SHOULD ignore the message.
	 
       - [ ] otherwise:
	 
	 - [ ] if the transaction referred to was NOT previously announced as a channel:
	   
	   - [ ] SHOULD queue the message for rebroadcasting.
	     
	   - [ ] MAY choose NOT to for messages longer than the minimum expected length.
	     
       - [ ] if it has previously received a valid ~channel_announcement~, for the same transaction, in the same block, but for a different node_id_1 or node_id_2:
	 SHOULD blacklist the previous message's ~node_id_1~ and ~node_id_2~, as well as this ~node_id_1~ and ~node_id_2~ AND forget any channels connected to them.
	 
       - [ ] otherwise:
	 SHOULD store this ~channel_announcement~.
	 
   - [ ] once its funding output has been spent OR reorganized out:
     SHOULD forget a channel.

* Channel update

** Receiving [0/9]

   
    - [ ] if the ~short_channel_id~ does NOT match a previous ~channel_announcement~, OR if the channel has been closed in the meantime:
      MUST ignore ~channel_update~'s that do NOT correspond to one of its own channels.

    - [ ] SHOULD accept ~channel_update~'s for its own channels (even if non-public), in order to learn the associated origin nodes' forwarding parameters.

    - [ ] if ~signature~ is not a valid signature, using ~node_id~ of the double-SHA256 of the entire message following the ~signature~ field (including unknown fields following ~fee_proportional_millionths~):
      MUST NOT process the message further.
      SHOULD fail the connection.
      
    - [ ] if the specified ~chain_hash~ value is unknown (meaning it isn't active on the specified chain):
      MUST ignore the channel update.

    - [ ] if the ~timestamp~ is equal to the last-received ~channel_update~ for this ~short_channel_id~ AND ~node_id~:

      - [ ] if the fields below timestamp differ:
         MAY blacklist this ~node_id~.
         MAY forget all channels associated with it.

      - [ ] if the fields below timestamp are equal:
        SHOULD ignore this message

    - [ ] if timestamp is lower than that of the last-received ~channel_update~ for this ~short_channel_id~ AND for ~node_id~:
      SHOULD ignore the message.
      
    - [ ] otherwise:

      - [ ] if the ~timestamp~ is unreasonably far in the future:
        MAY discard the ~channel_update~.

      - [ ] otherwise:
        SHOULD queue the message for rebroadcasting.
        MAY choose NOT to for messages longer than the minimum expected length.

    - [ ] if the ~option_channel_htlc_max~ bit of ~message_flags~ is 0:
      MUST consider htlc_maximum_msat not to be present.

    - [ ] otherwise:

      - [ ] if ~htlc_maximum_msat~ is not present or greater than channel capacity:
        MAY blacklist this ~node_id~
        SHOULD ignore this channel during route considerations.

      - [ ] otherwise:
        SHOULD consider the ~htlc_maximum_msat~ when routing.


* Node announcement

** Receiving [1/9]

    - [ ] if ~node_id~ is NOT a valid compressed public key:
      SHOULD fail the connection.
      MUST NOT process the message further.

    - [X] if ~signature~ is NOT a valid signature (using ~node_id~ of the double-SHA256 of the entire message following the ~signature~ field, including any future fields appended to the end):
      SHOULD fail the connection. ([[file:/usr/home/jiri/dev/scala/lnz/src/main/scala/proto/bolt/validate.scala::Node announcement signatures][ref1]], [[file:/usr/home/jiri/dev/scala/lnz/src/main/scala/peer.scala::Node announcement signature fail connection][ref2]])
      MUST NOT process the message further.

    - [ ] if ~features~ field contains unknown even bits:
      SHOULD NOT connect to the node.
      Unless paying a BOLT #11 invoice which does not have the same bit(s) set, MUST NOT attempt to send payments to the node.
      MUST NOT route a payment through the node.

    - [ ] SHOULD ignore the first ~address descriptor~ that does NOT match the types defined above.

    - [ ] if ~addrlen~ is insufficient to hold the address descriptors of the known types:
      SHOULD fail the connection.

    - [ ] if ~port~ is equal to 0:
      SHOULD ignore ~ipv6_addr~ OR ~ipv4_addr~.

    - [ ] if ~node_id~ is NOT previously known from a ~channel_announcement~ message, OR if ~timestamp~ is NOT greater than the last-received ~node_announcement~ from this ~node_id~:
      SHOULD ignore the message.

    - [ ] otherwise:
      - [ ] if ~timestamp~ is greater than the last-received ~node_announcement~ from ~this node_id~:
        SHOULD queue the message for rebroadcasting.
        MAY choose NOT to queue messages longer than the minimum expected length.

    - [ ] MAY use ~rgb_color~ AND ~alias~ to reference nodes in interfaces.
      SHOULD insinuate their self-signed origins.
